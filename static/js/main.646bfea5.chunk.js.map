{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","about","onClick","togglemode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","value","backgroundColor","onChange","event","console","log","target","rows","newText","toUpperCase","showalert","toLowerCase","split","length","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setmode","setalert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.646bfea5.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid \">\r\n          <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/\">{props.about}</a>\r\n              </li>        \r\n            </ul>\r\n            <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark':'light'}`}>\r\n              <input className=\"form-check-input\"  onClick={props.togglemode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n          </div> \r\n          </div>\r\n        </div>\r\n    </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {tital : PropTypes.string,\r\n                    about : PropTypes.string.isRequired}","import React , {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState(\"\");\r\n    const handleUPclick =() =>{\r\n        console.log(\"UpperCase was Clicked\");\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showalert(\"Converted To UpperCase!!\" , \"success\");\r\n    }\r\n    const handleLOWclick =() =>{\r\n        console.log(\"LowerCase was Clicked\");\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showalert(\"Converted To LowerCase!!\" , \"success\");\r\n    }\r\n    const handleCLRclick =() =>{\r\n        console.log(\"Clear Text was Clicked\");\r\n        let newText = \"\";\r\n        setText(newText);\r\n        props.showalert(\"Text is Cleared!!\" , \"success\");\r\n    }\r\n    const handleOnchange =(event) =>{\r\n        console.log(\"On Change\");\r\n        setText(event.target.value);\r\n    }\r\n    return (\r\n    <>\r\n        <div>\r\n            <h1 className=\"my-4\" style={{color : props.mode === 'dark' ? 'white':'black'}}>{props.heading} </h1>\r\n            <div className=\"mb-3 \"> \r\n                <textarea className=\"form-control\" value={text} style={{backgroundColor : props.mode === 'dark' ? '#362841':'white' , color : props.mode === 'dark' ? 'white':'black'}} onChange={handleOnchange} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button type=\"button\" className=\"btn btn-info mx-2\" onClick={handleUPclick} >Convert to UpperCase</button>\r\n            <button type=\"button\" className=\"btn btn-info mx-2\" onClick={handleLOWclick} >Convert to LowerCase</button>\r\n            <button type=\"button\" className=\"btn btn-info mx-2\" onClick={handleCLRclick}>Clear Text</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color : props.mode === 'dark' ? 'white':'black'}}>\r\n            <h1>Your Text Summary</h1>\r\n            <p>{text.split(\" \").length} Words and {text.length} Characters</p>\r\n            <p>{0.008 * text.split(\" \").length} Minutes to read the Text!!</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0 ? text : \"Enter Something to Preview it here!\"}</p>\r\n        </div>\r\n    </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize =(word)=>{\r\n        const lower = word.toLowerCase() ;\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}  </strong>  : {props.alert.msg}\r\n        <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './Components/Alert';\n\n\nfunction App() {\n  const [mode, setmode] = useState('light');\n  const [alert, setalert] = useState(null);\n  const showalert=(message , type)=>{\n        setalert({\n          msg : message,\n          type: type,\n        })\n        setTimeout(() => {\n          setalert(null);\n        }, 1500);\n  }\n  const togglemode=()=>{\n    if (mode==='light') {\n      setmode('dark');\n      document.body.style.backgroundColor = '#050635';\n      showalert(\"The Dark Mode has been Enabled!!\" , \"success\");\n    }\n    else{\n      setmode('light');\n      document.body.style.backgroundColor = 'white';\n      showalert(\"The Light Mode has been Enabled!!\" , \"success\");\n    }\n  }\n  return (\n    < >\n    <Navbar title=\"TextUtils\" mode={mode} about=\"About\" togglemode={togglemode}/>\n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n       <TextForm heading=\"Enter Your Text to Analyze below\" showalert={showalert} mode={mode}/> \n       {/* <About/> */}\n    </div>\n    \n    </ >\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}